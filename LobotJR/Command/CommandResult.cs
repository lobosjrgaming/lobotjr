using LobotJR.Twitch.Model;
using System;
using System.Collections.Generic;

namespace LobotJR.Command
{
    /// <summary>
    /// Class containing the results of an attempt to process a command.
    /// </summary>
    public class CommandResult
    {
        /// <summary>
        /// The user who sent the command that triggered this result.
        /// </summary>
        public User Sender { get; set; }
        /// <summary>
        /// Whether or not the message matched a loaded command, and that command was executed.
        /// </summary>
        public bool Processed { get; set; } = false;
        /// <summary>
        /// Whether or not to timeout the sender of the command.
        /// </summary>
        public bool TimeoutSender { get; set; } = false;
        /// <summary>
        /// The message to send to the user as part of the timeout.
        /// </summary>
        public string TimeoutMessage { get; set; } = string.Empty;
        /// <summary>
        /// The responses to send back to the user who issued the command.
        /// </summary>
        public IList<string> Responses { get; set; } = new List<string>();
        /// <summary>
        /// Messages to send to chat as a result of this command.
        /// </summary>
        public IList<string> Messages { get; set; } = new List<string>();
        /// <summary>
        /// Errors generated by the command, regardless of the success of the command's execution.
        /// </summary>
        public IList<Exception> Errors { get; set; } = new List<Exception>();
        /// <summary>
        /// Debug messages to output from the command.
        /// </summary>
        public IList<string> Debug { get; set; } = new List<string>();

        public CommandResult()
        {
            Processed = false;
        }

        public CommandResult(bool processed)
        {
            Processed = processed;
        }

        public CommandResult(User sender)
        {
            Processed = true;
            Sender = sender;
        }

        public CommandResult(User sender, params string[] responses)
        {
            Processed = true;
            Sender = sender;
            Responses = new List<string>(responses);
        }

        public CommandResult(params string[] responses)
        {
            Processed = true;
            Responses = new List<string>(responses);
        }

        public CommandResult(params Exception[] errors)
        {
            Processed = true;
            Errors = new List<Exception>(errors);
        }
    }
}
