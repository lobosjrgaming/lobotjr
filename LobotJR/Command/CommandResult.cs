using LobotJR.Twitch.Model;
using System;
using System.Collections.Generic;

namespace LobotJR.Command
{
    /// <summary>
    /// Class containing the results of an attempt to process a command.
    /// </summary>
    public class CommandResult
    {
        /// <summary>
        /// The user who sent the command that triggered this result.
        /// </summary>
        public User Sender { get; set; }
        /// <summary>
        /// Whether or not the message matched a loaded command, and that command was executed.
        /// </summary>
        public bool Processed { get; set; } = false;
        /// <summary>
        /// Whether or not to timeout the sender of the command.
        /// </summary>
        public bool TimeoutSender { get; set; } = false;
        /// <summary>
        /// The message to send to the user as part of the timeout.
        /// </summary>
        public string TimeoutMessage { get; set; } = string.Empty;
        /// <summary>
        /// The responses to send back to the user who issued the command.
        /// </summary>
        public IList<string> Responses { get; set; } = new List<string>();
        /// <summary>
        /// Messages to send to chat as a result of this command.
        /// </summary>
        public IList<string> Messages { get; set; } = new List<string>();
        /// <summary>
        /// Errors generated by the command, regardless of the success of the command's execution.
        /// </summary>
        public IList<Exception> Errors { get; set; } = new List<Exception>();
        /// <summary>
        /// Debug messages to output from the command.
        /// </summary>
        public IList<string> Debug { get; set; } = new List<string>();

        /// <summary>
        /// Creates a default command result. This indicates the command was
        /// not processed successfully.
        /// </summary>
        public CommandResult()
        {
            Processed = false;
        }

        /// <summary>
        /// Creates a command result indicating a command was processed
        /// successfully, but has no response messages.
        /// </summary>
        /// <param name="processed">True if the command was processed
        /// successfully.</param>
        public CommandResult(bool processed)
        {
            Processed = processed;
        }

        /// <summary>
        /// Creates a command result indicating a command was processed
        /// successfully, and has messages to be sent to chat.
        /// </summary>
        /// <param name="processed">True if the command was processed
        /// successfully.</param>
        /// <param name="messages">A collection of messages to send to chat.</param>
        public CommandResult(bool processed, params string[] messages)
        {
            Processed = processed;
            Messages = new List<string>(messages);
        }

        /// <summary>
        /// Creates a command result to use for push notification.
        /// </summary>
        /// <param name="sender">The user the messages should be sent to.</param>
        /// <param name="responses">A collection of messages to be sent to the user.</param>
        public CommandResult(User sender, params string[] responses)
        {
            Processed = true;
            Sender = sender;
            Responses = new List<string>(responses);
        }

        /// <summary>
        /// Creates a result for a processed command.
        /// </summary>
        /// <param name="responses">A collection of messages to send to the
        /// user who invoked the command.</param>
        public CommandResult(params string[] responses)
        {
            Processed = true;
            Responses = new List<string>(responses);
        }

        /// <summary>
        /// Creates a result for a command that threw an exception.
        /// </summary>
        /// <param name="errors">A collection of exceptions that were thrown by
        /// this command.</param>
        public CommandResult(params Exception[] errors)
        {
            Processed = true;
            Errors = new List<Exception>(errors);
        }
    }
}
